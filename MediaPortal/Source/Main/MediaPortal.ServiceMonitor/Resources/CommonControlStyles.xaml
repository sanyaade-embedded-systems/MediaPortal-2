<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    mc:Ignorable="d">


  <!-- Dialogs -->
  <Style x:Key="DialogWindow" TargetType="{x:Type Window}">
    <Setter Property="ResizeMode" Value="NoResize" />
    <Setter Property="ShowInTaskbar" Value="False" />
    <Setter Property="Background" Value="{DynamicResource DialogBackgroundBrush}" />
  </Style>

  <!-- TextBox -->
  <Style x:Key="DefaultTextBox" TargetType="{x:Type Control}">
    <Style.Triggers>
      <Trigger Property="IsFocused" Value="True">
        <Setter Property="BorderBrush" Value="{DynamicResource ActiveTextBoxBorder}" />
        <Setter Property="Background" Value="{DynamicResource ActiveTextBoxBackground}" />
        <Setter Property="Foreground" Value="{DynamicResource ActiveTextBoxForeground}" />
      </Trigger>

      <!-- disabling the item lowers opacity -->
      <Trigger Property="IsEnabled" Value="False">
        <Setter Property="Opacity" Value="0.28" />
      </Trigger>

      <!--Just let background see through if the control cannot be focused-->
      <Trigger Property="Focusable" Value="False">
        <Setter Property="Background" Value="Transparent" />
      </Trigger>

      <!-- only display validation errors if globally enabled -->
      <MultiDataTrigger>
        <MultiDataTrigger.Conditions>
          <Condition Binding="{Binding RelativeSource={x:Static RelativeSource.Self}, Path=(Validation.HasError)}" Value="True" />
        </MultiDataTrigger.Conditions>
        <Setter Property="Background" Value="{DynamicResource InvalidTextBoxBackground}" />
        <Setter Property="ToolTip" Value="{Binding RelativeSource={x:Static RelativeSource.Self}, Path=(Validation.Errors).CurrentItem.ErrorContent}" />
      </MultiDataTrigger>

      <!-- if an item is marked as disabled, just disable it-->
      <DataTrigger Binding="{Binding RelativeSource={x:Static RelativeSource.Self}, Path=(Validation.Errors).CurrentItem.ErrorContent}" Value="DISABLED">
        <!-- make barely visible -->
        <Setter Property="IsEnabled" Value="False" />
        <!-- reset background and tooltip -->
        <Setter Property="Background" Value="{DynamicResource TextBoxBackground}" />
        <Setter Property="ToolTip" Value="{x:Null}" />
      </DataTrigger>

    </Style.Triggers>

    <Setter Property="AllowDrop" Value="true" />
    <Setter Property="BorderThickness" Value="0,0,0,0" />
    <Setter Property="Foreground" Value="{DynamicResource Foreground}" />
    <Setter Property="FontSize" Value="14" />
    <Setter Property="Background" Value="{DynamicResource TextBoxBackground}" />
    <Setter Property="BorderBrush" Value="{DynamicResource TextBoxBorder}" />

    <!-- remove default error template -->
    <Setter Property="Validation.ErrorTemplate" Value="{x:Null}" />

    <!-- control template -->
    <Setter Property="Template"> 
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Control}">
          <Border Width="Auto" Height="Auto" BorderThickness="1,1,1,1" BorderBrush="{TemplateBinding BorderBrush}" 
                  CornerRadius="0,0,0,0" Background="{TemplateBinding Background}">
            <ScrollViewer x:Name="PART_ContentHost" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                          FontSize="{TemplateBinding FontSize}" FontWeight="Normal" />
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  
  <!-- TextBox -->
  <Style TargetType="{x:Type TextBox}" BasedOn="{StaticResource DefaultTextBox}">
  </Style>

  <!-- Editor Label TextBlock -->
  <Style x:Key="DefaultLabel" TargetType="{x:Type TextBlock}">
    <Setter Property="Foreground" Value="{DynamicResource Foreground}" />
    <Setter Property="FontSize" Value="14" />
  </Style>

  <!-- Editor Label TextBlock -->
  <Style x:Key="TitleLabel" TargetType="{x:Type TextBlock}">
    <Setter Property="Foreground" Value="{DynamicResource TitleForeground}" />
    <Setter Property="FontSize" Value="16" />
    <Setter Property="FontWeight" Value="Bold"/>
  </Style>

</ResourceDictionary>